package com.example.accessingdatamysql;

import java.util.Date;

import com.mysql.cj.x.protobuf.MysqlxDatatypes.Array;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.client.RestTemplate;

import antlr.collections.List;



@Controller // This means that this class is a Controller
@RequestMapping(path = "/demo") // This means URL's start with /demo (after Application path)
public class MainController {
	
	@Autowired // This means to get the bean called userRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	
	
	private ArticlesRepository userRepository;

	@PostMapping(path = "/add") // Map ONLY POST Requests
	
	public @ResponseBody Object addNewUser(@RequestParam(required = false, name = "title") String title,
			@RequestParam(required = false, name = "author") String author,
			@RequestParam(required = false, name = "description") String description,
			@RequestParam(required = false, name = "url") String url,
			@RequestParam(required = false, name = "urlToImage") String urlToImage,
			@RequestParam(required = false, name = "published") Date published)
		  {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Articles n = new Articles();
		n.setTitle(title);
		n.setAuthor(author);
		n.setUrl(url);
		n.setDescription(description);
		n.setUrlToImage(urlToImage);
		//n.setPublished(published);
		userRepository.save(n);
		return "Saved";
	}

	@GetMapping(path="/all")
	public @ResponseBody Iterable<Articles> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}

	// BELOW CODE TO MAP FROM EXTERNAL API TO DATABASE
	
	@GetMapping(path = "/test")
    
	public @ResponseBody List getAll() {
		String url = "https://newsapi.org/v2/everything?q=('+search%20+engine%20+optimization' OR '+SEO')&sortBy=publishedAt&language=en&apiKey=f5ae70fe95da4ca892c7027bd1ee6b10";
		RestTemplate restTemplate = new RestTemplate();
 
		// This returns a JSON or XML with the users
		// String a =  restTemplate.getForObject(url, String.class);


		// @PostMapping(path = "/new") // Map ONLY POST Requests
	
	// public @ResponseBody Object addNew(@RequestParam(required = false, name = "title") String title,
			// @RequestParam(required = false, name = "author") String author,
			//@RequestParam(required = false, name = "description") String description,
			// @RequestParam(required = false, name = "url") String url,
			// @RequestParam(required = false, name = "urlToImage") String urlToImage,
			// @RequestParam(required = false, name = "published", value="date") Date published)
		//   {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

	// 	Articles n = new Articles();
	// 	n.setDescription(this.a.description);

	// 	userRepository.save(n);
	// 	return "Saved";
	// }
	return restTemplate.getForObject(url, List.class);
	}
	

	
}
